#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include "MAX30100_PulseOximeter.h"
#include "DHT.h"

#define REPORTING_PERIOD_MS     5000 // Report every 5 seconds

// LCD address and size
LiquidCrystal_I2C lcd(0x27, 16, 2);

// PulseOximeter instance
PulseOximeter pox;

// DHT sensor instance
#define DHT11_PIN 7
DHT dht(DHT11_PIN, DHT11);

uint32_t tsLastReportPulse = 0;
uint32_t tsLastReportTemp = 0;

void onBeatDetected() {
    Serial.println("Beat!");
}

void setup() {
    Serial.begin(115200);

    // Initialize LCD
    lcd.init();
    lcd.backlight();

    // Initialize PulseOximeter
    if (!pox.begin()) {
        Serial.println("Pulse Oximeter initialization FAILED");
        lcd.setCursor(0, 0);
        lcd.print("Pulse Ox FAILED");
        while (1); // Infinite loop to halt the program
    } else {
        Serial.println("Pulse Oximeter initialization SUCCESS");
        pox.setIRLedCurrent(MAX30100_LED_CURR_7_6MA);
        pox.setOnBeatDetectedCallback(onBeatDetected);
    }

    // Initialize DHT sensor
    dht.begin();
}

void loop() {
    // Update PulseOximeter
    pox.update();

  // Read pulse rate and SpO2 levels
        float heartRate = pox.getHeartRate();
        float spo2 = pox.getSpO2();

        String healthStatus;
    if (spo2 >= 95 && heartRate >= 60 && heartRate <= 100) {
        healthStatus = "Healthy";
    } else if (spo2 >= 90 && heartRate >= 50 && heartRate <= 110) {
        healthStatus = "Moderately Healthy";
    } else {
        healthStatus = "Unhealthy";
    }

  // Display health status on LCD
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Health Status:");
    lcd.setCursor(0, 1);
    lcd.print(healthStatus);
    

    // Display Pulse Rate and SpO2 values
    if (millis() - tsLastReportPulse > REPORTING_PERIOD_MS) {
        // Read pulse rate and SpO2 levels
        float heartRate = pox.getHeartRate();
        float spo2 = pox.getSpO2();

        // Print values to the serial monitor
        Serial.print("Pulse Rate: ");
        Serial.print(heartRate);
        Serial.print(" bpm | SpO2: ");
        Serial.print(spo2);
        Serial.println("%");

        // Print values to the LCD
        lcd.clear();
        lcd.setCursor(0, 0);
        if (!isnan(heartRate)) {
            lcd.print("Pulse Rate: ");
            lcd.print(heartRate);
            lcd.print(" bpm");
        } else {
            lcd.print("Pulse Rate: N/A");
        }

        lcd.setCursor(0, 1);
        lcd.print("SpO2: ");
        lcd.print(spo2);
        lcd.print("%");

        tsLastReportPulse = millis(); // Update last report time for pulse rate and SpO2
    }

    // Display Temperature and Humidity values
    if (millis() - tsLastReportTemp > REPORTING_PERIOD_MS) {
        // Read temperature and humidity values
        float temperature = dht.readTemperature();
        float humidity = dht.readHumidity();


        tsLastReportTemp = millis(); // Update last report time for temperature and humidity
    }
}
